#summary This wiki page describes the box2d API and its implementation for M3.

= Introduction =

The Box2D API consists of 3 interconnected modules that together simulate a physics environment, Common, Collision, Dynamics.  Common holds some math function and other adjustable properties.  Collision is in charge of collision detection and holds the data about the shapes and it vertices to do so.  Dynamics holds the information about the physical bodies of the object for interactions with forces especially gravity.


= Details =

The world module of M3 has methods to create objects that will interact with the physics world.  So far there are 3 public methods to create objects, createBox, createBall, createPoly.  Each take and x and y as its first arguments which is the centroid of an object with the point (0,0) at the upper left corner for our convention.  All the functions have arguments fixed, density, restitution, and friction.  These all relate to the physical environment. Fixed is a Boolean that will state if an object will be fixed at a location or will interact with forces such as gravity.  Density, friction, and restitution (bounciness) are physical properties of an object.  Each method returns an object with a reference to the body and shape objects.  Where the methods differ is that createBox takes in a width and height, createBall takes in the radius and createPoly takes in an array of points that are about that objects centroid as its origin. The method signatures are:

createBox(x, y, width, height, fixed, density, restitution, friction, draw)

createBall(x, y, radius, fixed, density, restitution, friction, draw)

createPoly(x, y, points, fixed, density, restitution, friction, draw)